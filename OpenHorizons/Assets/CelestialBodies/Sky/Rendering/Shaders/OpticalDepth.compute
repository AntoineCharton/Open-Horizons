#pragma kernel Main


RWTexture2D<float4> _Result;

int _TextureSize;
int _NumOutScatteringSteps;

float _PlanetRadius;
float _AtmosphereRadius;

float _RayleighFalloff;
float _MieFalloff;
float _HeightAbsorbtion;



float3 DensityAtPoint(float2 position)
{
    float height = length(position) - _PlanetRadius;
    float height01 = height / (_AtmosphereRadius - _PlanetRadius);

    float2 scaleHeight = float2(_RayleighFalloff, _MieFalloff);

    float3 density = float3(exp(-height01 * scaleHeight) * (1 - height01), 0.0);

    float denom = (_HeightAbsorbtion + height01);
    density.z = (1.0 / (denom * denom + 1.0)) * density.x;

    density.z = saturate(density.z);

    return density;
}

// Returns vector (dstToSphere, dstThroughSphere)
// If ray origin is inside sphere, dstToSphere = 0
// If ray misses sphere, dstToSphere = maxValue; dstThroughSphere = 0
float2 RaySphere(float3 sphereCentre, float sphereRadius, float3 rayOrigin, float3 rayDir)
{
	float3 offset = rayOrigin - sphereCentre;
	float a = 1; // Set to dot(rayDir, rayDir) if rayDir might not be normalized
	float b = 2 * dot(offset, rayDir);
	float c = dot(offset, offset) - sphereRadius * sphereRadius;
	float d = b * b - 4 * a * c; // Discriminant from quadratic formula
	float MAX_FLOAT = 3.402823466e+38;
	float2 intersection = float2(MAX_FLOAT, 0);

	// Number of intersections: 0 when d < 0; 1 when d = 0; 2 when d > 0
	if (d > 0)
	{
		float s = sqrt(d);
		float dstToSphereNear = max(0, (-b - s) / (2 * a));
		float dstToSphereFar = (-b + s) / (2 * a);
		// Ignore intersections that occur behind the ray
		if (dstToSphereFar >= 0)
		{
			intersection = float2(dstToSphereNear, dstToSphereFar - dstToSphereNear);
		}
	}


	return intersection;
}


[numthreads(8, 8, 1)]
void Main(uint2 id : SV_DispatchThreadID)
{
	float2 uv = id / (float)_TextureSize;
	float height01 = uv.y;

	float y = -2 * uv.x + 1;
	float x = sin(acos(y));
	float2 dir = float2(x, y);
	
	float2 inPoint = float2(0, lerp(_PlanetRadius, _AtmosphereRadius, height01));

    float dstThroughAtmosphere = RaySphere(0, _AtmosphereRadius, float3(inPoint, 0), float3(dir, 0)).y;

    inPoint = inPoint + dir * 0.0001;

	float stepSize = dstThroughAtmosphere / (_NumOutScatteringSteps - 1);
	float3 outScattering = 0;

	for (int i = 0; i < _NumOutScatteringSteps; i ++) {
		float3 localDensity = DensityAtPoint(inPoint);

		outScattering += localDensity * stepSize;

		inPoint += dir * stepSize;
	}

	_Result[id.xy] = float4(outScattering.xyz, 0);
}

//MIT License
//Copyright (c) 2023 Kai Angulo
//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.